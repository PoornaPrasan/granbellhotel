const cron = require('node-cron');
const Reservation = require('../models/Reservation');
const Room = require('../models/Room');
const Billing = require('../models/Billing');
const Report = require('../models/Report');

const generateDailyOccupancyReport = async () => {
  try {
    const reportDate = new Date();
    reportDate.setHours(0, 0, 0, 0);

    const startOfDay = new Date(reportDate);
    const endOfDay = new Date(reportDate);
    endOfDay.setHours(23, 59, 59, 999);

    const totalRooms = await Room.countDocuments();

    const occupiedRooms = await Reservation.countDocuments({
      checkInDate: { $lte: endOfDay },
      checkOutDate: { $gt: startOfDay },
      status: { $in: ['confirmed', 'checked-in'] }
    });

    const vacantRooms = totalRooms - occupiedRooms;

    const noShowCount = await Reservation.countDocuments({
      checkInDate: { $gte: startOfDay, $lte: endOfDay },
      status: 'no-show'
    });

    const reservationsOnDate = await Reservation.find({
      checkInDate: { $lte: endOfDay },
      checkOutDate: { $gt: startOfDay },
      status: { $nin: ['cancelled'] }
    });

    let roomRevenue = 0;
    for (const res of reservationsOnDate) {
      const totalDays = Math.ceil((res.checkOutDate - res.checkInDate) / (1000 * 60 * 60 * 24));
      const daysBefore = Math.max(0, Math.ceil((startOfDay - res.checkInDate) / (1000 * 60 * 60 * 24)));
      const daysAfter = Math.max(0, Math.ceil((res.checkOutDate - endOfDay) / (1000 * 60 * 60 * 24)));
      const daysInPeriod = Math.max(0, totalDays - daysBefore - daysAfter);

      if (daysInPeriod > 0) {
        roomRevenue += (res.totalAmount / totalDays) * daysInPeriod;
      }
    }

    const billings = await Billing.find({
      createdAt: { $gte: startOfDay, $lte: endOfDay }
    });

    const serviceRevenue = billings.reduce((sum, billing) => {
      return sum + billing.additionalCharges.reduce((chargeSum, charge) => chargeSum + charge.amount, 0);
    }, 0);

    const totalRevenue = roomRevenue + serviceRevenue;

    const reportData = {
      date: reportDate,
      totalRooms,
      occupiedRooms,
      vacantRooms,
      occupancyRate: totalRooms > 0 ? ((occupiedRooms / totalRooms) * 100).toFixed(2) : 0,
      noShowCount,
      revenue: {
        room: Math.round(roomRevenue * 100) / 100,
        services: Math.round(serviceRevenue * 100) / 100,
        total: Math.round(totalRevenue * 100) / 100
      }
    };

    await Report.create({
      type: 'daily_occupancy',
      isAutoGenerated: true,
      reportDate,
      data: reportData,
      status: 'generated'
    });

    console.log(`[${new Date().toISOString()}] Daily Occupancy Report generated successfully`);
    return reportData;
  } catch (error) {
    console.error(`[${new Date().toISOString()}] Error generating daily occupancy report:`, error);
    throw error;
  }
};

const generateNoShowReport = async () => {
  try {
    const reportDate = new Date();
    reportDate.setHours(0, 0, 0, 0);

    const startOfDay = new Date(reportDate);
    const endOfDay = new Date(reportDate);
    endOfDay.setHours(23, 59, 59, 999);

    const noShowReservations = await Reservation.find({
      checkInDate: { $gte: startOfDay, $lte: endOfDay },
      status: 'no-show'
    }).populate('roomId', 'type number').populate('customerId', 'name email');

    const noShowsWithBilling = await Promise.all(
      noShowReservations.map(async (reservation) => {
        const billing = await Billing.findOne({ reservationId: reservation._id });

        const noShowCharge = reservation.depositAmount || (reservation.totalAmount * 0.5);

        return {
          reservationId: reservation._id,
          customerName: reservation.customerName,
          customerEmail: reservation.customerEmail,
          customerPhone: reservation.customerPhone,
          roomType: reservation.roomId?.type || 'N/A',
          roomNumber: reservation.roomNumber,
          checkInDate: reservation.checkInDate,
          noShowCharge: Math.round(noShowCharge * 100) / 100,
          paymentStatus: billing?.paymentStatus || 'pending',
          paidAmount: billing?.paidAmount || 0
        };
      })
    );

    const totalNoShows = noShowsWithBilling.length;
    const totalCharges = noShowsWithBilling.reduce((sum, item) => sum + item.noShowCharge, 0);
    const totalPaid = noShowsWithBilling.reduce((sum, item) => sum + item.paidAmount, 0);

    const reportData = {
      date: reportDate,
      totalNoShows,
      totalCharges: Math.round(totalCharges * 100) / 100,
      totalPaid: Math.round(totalPaid * 100) / 100,
      outstanding: Math.round((totalCharges - totalPaid) * 100) / 100,
      noShows: noShowsWithBilling
    };

    await Report.create({
      type: 'no_show',
      isAutoGenerated: true,
      reportDate,
      data: reportData,
      status: 'generated'
    });

    console.log(`[${new Date().toISOString()}] No-Show Report generated successfully`);
    return reportData;
  } catch (error) {
    console.error(`[${new Date().toISOString()}] Error generating no-show report:`, error);
    throw error;
  }
};

const scheduleDailyReports = () => {
  cron.schedule('0 19 * * *', async () => {
    console.log(`[${new Date().toISOString()}] Running scheduled daily reports at 7:00 PM...`);

    try {
      await generateDailyOccupancyReport();
      await generateNoShowReport();
      console.log(`[${new Date().toISOString()}] All daily reports generated successfully`);
    } catch (error) {
      console.error(`[${new Date().toISOString()}] Error in scheduled daily reports:`, error);
    }
  }, {
    scheduled: true,
    timezone: "America/New_York"
  });

  console.log('Daily report scheduler initialized - Reports will be generated at 7:00 PM daily');
};

module.exports = {
  scheduleDailyReports,
  generateDailyOccupancyReport,
  generateNoShowReport
};
